#!/bin/bash

#SUB
warts2link(){
test $# -lt 1 && echo 'warts2link $prefix.warts[.tar.gz;.gz]' && exit

input_file_path=$1
prefix=$(echo $input_file_path | sed 's/\.gz$//' | sed 's/\.tar$//' | sed 's/\.warts$//')

(test ! -z "$(echo $input_file_path | grep -E '\.tar\.gz$')" && tar zxf $input_file_path -O \
  || test ! -z "$(echo $input_file_path | grep -E '\.gz$')" && gzip -cd $input_file_path \
  || cat $input_file_path) | (test ! -z "$(echo $input_file_path | grep -E 'warts')" && sc_warts2text \
  || cat) | perl trace2link.pl -p $prefix -
#output_file_path: $prefix.links
}

link2iface(){
test $# -lt 1 && echo 'link2iface $prefix.links' && exit

input=$1
prefix=$(echo $input | sed 's/\.links$//')

cat $input | python <(
cat << "END"
out={}
while True:
  try:
    line=raw_input()
  except:
    break
  fields = line.split()
  print fields[0] # 'from' must be a router iface
  if not out.has_key(fields[1]):
    out[fields[1]] = fields[2]
  elif fields[2] == "N":
    out[fields[1]] = "N"
for k,v in out.items():
  if v == "N":
    print k
END
) | sort | uniq >$prefix.ifaces
#output_file_path: $prefix.ifaces
}

warts2ifaces(){
test $# -lt 1 && echo 'warts2ifaces $input $output' && exit

input=$1
output=$2
prefix=$(echo $output | sed 's/\.ifaces$//')
for l in ${input[*]}; do
  pfx=$(echo $l | sed 's/\.warts$//')
  warts2link $l
  test $(cat $pfx.links | sed '/^$/d' | wc -l) -gt 0 && echo $pfx.links
done | perl linkmerge.pl >$prefix.links
link2iface $prefix.links
}

#MAIN
usage(){
echo 'analyze <$command> [$args]'
echo 'COMMANDS:'
echo '  warts2link'
echo '  link2iface'
}
test $# -lt 1 && usage && exit

cmd=$1
case $cmd in
  "warts2link")
    test $# -lt 2 && usage && exit
    input_file_path=$2;

    warts2link $input_file_path
    prefix=$(echo $input_file_path | sed 's/\.gz$//' | sed 's/\.tar$//' | sed 's/\.warts$//')
    ;;
  "link2iface")
    test $# -lt 2 && usage && exit
    input=$2;

    link2iface $input
    ;;
  "warts2iface")
    test $# -lt 3 && usage && exit

    input=$2
    output=$3
    warts2ifaces "$input" $output
    ;;
  *)
    usage
    exit;;
esac
