#!/bin/bash

pchar2link(){
test $# -lt 1 && echo 'pchar2link $pchar' && exit

pchar=$1
prefix=$(echo $pchar | sed 's/\.pchar$//')
cat $pchar | python <(
cat << "EOF"
import re

d = {}
def add():
  p = hl[0]
  for h in hl[1:]:
    if 'bw' in h:
      k = (p['ip'], h['ip']);
      if "*" in k:
        continue
      if not k in d:
        d[k] = (h['bw'], h['rtt'])
        continue
      if d[k] < h['bw']:
        d[k][0] = h['bw']
      if d[k] > h['rtt']:
        d[k][0] = h['rtt']
      p = h

hl = []; h = {}; dst = ''
while True:
  try:
    l = raw_input().strip()
  except:
    add()
    break
  # new pchar
  if l.startswith('pchar to'):
    dst = l.split()[2]
    if hl:
      hl.append(h); h ={}
      add()
      hl = []
    continue

  # new hop
  r = re.search(r'^(\d+): (\S*)', l)
  if r:
    if h:
      hl.append(h); h = {}
    n, ip = r.group(1), r.group(2)
    h['n'] = int(n)
    h['ip'] = '*' if ip == 'no' else ip
    continue

  # hop char
  if l.startswith('Hop char:'):
    r = re.search(r'bw = (\S*) Kbps', l)
    if r:
      bw = r.group(1)
      h['bw'] = 0 if '-' in bw else float(bw)

    r = re.search(r'rtt = (\S*) ms', l)
    if r:
      rtt = r.group(1)
      h['rtt'] = 0 if '-' in rtt else float(rtt)

# output
for k,v in d.items():
  print '%s %s %.2f %.2f' % (k[0], k[1], v[0], v[1])
EOF
) >$prefix.links
}

pchars2link(){
test $# -lt 1 && echo 'pchars2link $input $output' && exit

input=$1
output=$2
for l in ${input[*]}; do
  pfx=$(echo $l | sed 's/\.pchar$//')
  pchar2link $l
  echo $pfx.links
done \
| xargs -n 1 cat | \
python <(
    cat << "EOF"
d = {}
while True:
  try:
    l = raw_input().strip()
  except:
    break
  f = l.split()
  k = (f[0], f[1])
  rtt, bw = f[2:]
  if not k in d:
    d[k] = f[2:]
    continue
  if float(d[k][0]) > float(rtt):
    d[k][0] = rtt
  if float(d[k][1]) < float(bw):
    d[k][1] = bw

# output
for k,v in d.items():
  print ' '.join(k+tuple(v))
EOF
) >$output
}

test $# -lt 2 && exit

input=$1
output=$2
pchars2link "$input" $output
